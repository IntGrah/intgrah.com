datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique

  subscriber Boolean @default(false)
  editor     Boolean @default(false)
  admin      Boolean @default(false)

  raven       Raven?
  credentials Credentials?
  sessions    Session[]
  articles    Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Raven {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  email             String @unique
  providerAccountId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Credentials {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  email         String    @unique
  emailVerified DateTime?
  passwordHash  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id     String @id @default(cuid())
  userId String // author
  slug   String @db.Text
  title  String @db.Text
  body   String @db.LongText
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
